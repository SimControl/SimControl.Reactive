//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SimControl.Samples.CSharp.Wcf.Client40.SampleServiceEap {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SampleServiceEap.ISampleService", CallbackContract=typeof(SimControl.Samples.CSharp.Wcf.Client40.SampleServiceEap.ISampleServiceCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface ISampleService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISampleService/Connect", ReplyAction="http://tempuri.org/ISampleService/ConnectResponse")]
        void Connect();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISampleService/Connect", ReplyAction="http://tempuri.org/ISampleService/ConnectResponse")]
        System.IAsyncResult BeginConnect(System.AsyncCallback callback, object asyncState);
        
        void EndConnect(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/ISampleService/InvokeCallback", ReplyAction="http://tempuri.org/ISampleService/InvokeCallbackResponse")]
        SimControl.Samples.CSharp.Wcf.ServiceContract.CompositeType InvokeCallback(SimControl.Samples.CSharp.Wcf.ServiceContract.CompositeType compositeType);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, AsyncPattern=true, Action="http://tempuri.org/ISampleService/InvokeCallback", ReplyAction="http://tempuri.org/ISampleService/InvokeCallbackResponse")]
        System.IAsyncResult BeginInvokeCallback(SimControl.Samples.CSharp.Wcf.ServiceContract.CompositeType compositeType, System.AsyncCallback callback, object asyncState);
        
        SimControl.Samples.CSharp.Wcf.ServiceContract.CompositeType EndInvokeCallback(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsInitiating=false, Action="http://tempuri.org/ISampleService/InvokeCallbackOneWay")]
        void InvokeCallbackOneWay(SimControl.Samples.CSharp.Wcf.ServiceContract.CompositeType compositeType);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsInitiating=false, AsyncPattern=true, Action="http://tempuri.org/ISampleService/InvokeCallbackOneWay")]
        System.IAsyncResult BeginInvokeCallbackOneWay(SimControl.Samples.CSharp.Wcf.ServiceContract.CompositeType compositeType, System.AsyncCallback callback, object asyncState);
        
        void EndInvokeCallbackOneWay(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/ISampleService/Operation", ReplyAction="http://tempuri.org/ISampleService/OperationResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(System.InvalidOperationException), Action="http://tempuri.org/ISampleService/OperationInvalidOperationExceptionFault", Name="InvalidOperationException", Namespace="http://schemas.datacontract.org/2004/07/System")]
        void Operation(SimControl.Samples.CSharp.Wcf.ServiceContract.OperationMode operationMode);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, AsyncPattern=true, Action="http://tempuri.org/ISampleService/Operation", ReplyAction="http://tempuri.org/ISampleService/OperationResponse")]
        System.IAsyncResult BeginOperation(SimControl.Samples.CSharp.Wcf.ServiceContract.OperationMode operationMode, System.AsyncCallback callback, object asyncState);
        
        void EndOperation(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISampleServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISampleService/Callback", ReplyAction="http://tempuri.org/ISampleService/CallbackResponse")]
        SimControl.Samples.CSharp.Wcf.ServiceContract.CompositeType Callback(SimControl.Samples.CSharp.Wcf.ServiceContract.CompositeType compositeType);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISampleService/Callback", ReplyAction="http://tempuri.org/ISampleService/CallbackResponse")]
        System.IAsyncResult BeginCallback(SimControl.Samples.CSharp.Wcf.ServiceContract.CompositeType compositeType, System.AsyncCallback callback, object asyncState);
        
        SimControl.Samples.CSharp.Wcf.ServiceContract.CompositeType EndCallback(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISampleService/OneWayCallback")]
        void OneWayCallback(SimControl.Samples.CSharp.Wcf.ServiceContract.CompositeType compositeType);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/ISampleService/OneWayCallback")]
        System.IAsyncResult BeginOneWayCallback(SimControl.Samples.CSharp.Wcf.ServiceContract.CompositeType compositeType, System.AsyncCallback callback, object asyncState);
        
        void EndOneWayCallback(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISampleServiceChannel : SimControl.Samples.CSharp.Wcf.Client40.SampleServiceEap.ISampleService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class InvokeCallbackCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public InvokeCallbackCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SimControl.Samples.CSharp.Wcf.ServiceContract.CompositeType Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SimControl.Samples.CSharp.Wcf.ServiceContract.CompositeType)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SampleServiceClient : System.ServiceModel.DuplexClientBase<SimControl.Samples.CSharp.Wcf.Client40.SampleServiceEap.ISampleService>, SimControl.Samples.CSharp.Wcf.Client40.SampleServiceEap.ISampleService {
        
        private BeginOperationDelegate onBeginConnectDelegate;
        
        private EndOperationDelegate onEndConnectDelegate;
        
        private System.Threading.SendOrPostCallback onConnectCompletedDelegate;
        
        private BeginOperationDelegate onBeginInvokeCallbackDelegate;
        
        private EndOperationDelegate onEndInvokeCallbackDelegate;
        
        private System.Threading.SendOrPostCallback onInvokeCallbackCompletedDelegate;
        
        private BeginOperationDelegate onBeginInvokeCallbackOneWayDelegate;
        
        private EndOperationDelegate onEndInvokeCallbackOneWayDelegate;
        
        private System.Threading.SendOrPostCallback onInvokeCallbackOneWayCompletedDelegate;
        
        private BeginOperationDelegate onBeginOperationDelegate;
        
        private EndOperationDelegate onEndOperationDelegate;
        
        private System.Threading.SendOrPostCallback onOperationCompletedDelegate;
        
        public SampleServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public SampleServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public SampleServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public SampleServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public SampleServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ConnectCompleted;
        
        public event System.EventHandler<InvokeCallbackCompletedEventArgs> InvokeCallbackCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> InvokeCallbackOneWayCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OperationCompleted;
        
        public void Connect() {
            base.Channel.Connect();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginConnect(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginConnect(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndConnect(System.IAsyncResult result) {
            base.Channel.EndConnect(result);
        }
        
        private System.IAsyncResult OnBeginConnect(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginConnect(callback, asyncState);
        }
        
        private object[] OnEndConnect(System.IAsyncResult result) {
            this.EndConnect(result);
            return null;
        }
        
        private void OnConnectCompleted(object state) {
            if ((this.ConnectCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ConnectCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ConnectAsync() {
            this.ConnectAsync(null);
        }
        
        public void ConnectAsync(object userState) {
            if ((this.onBeginConnectDelegate == null)) {
                this.onBeginConnectDelegate = new BeginOperationDelegate(this.OnBeginConnect);
            }
            if ((this.onEndConnectDelegate == null)) {
                this.onEndConnectDelegate = new EndOperationDelegate(this.OnEndConnect);
            }
            if ((this.onConnectCompletedDelegate == null)) {
                this.onConnectCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnConnectCompleted);
            }
            base.InvokeAsync(this.onBeginConnectDelegate, null, this.onEndConnectDelegate, this.onConnectCompletedDelegate, userState);
        }
        
        public SimControl.Samples.CSharp.Wcf.ServiceContract.CompositeType InvokeCallback(SimControl.Samples.CSharp.Wcf.ServiceContract.CompositeType compositeType) {
            return base.Channel.InvokeCallback(compositeType);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginInvokeCallback(SimControl.Samples.CSharp.Wcf.ServiceContract.CompositeType compositeType, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginInvokeCallback(compositeType, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public SimControl.Samples.CSharp.Wcf.ServiceContract.CompositeType EndInvokeCallback(System.IAsyncResult result) {
            return base.Channel.EndInvokeCallback(result);
        }
        
        private System.IAsyncResult OnBeginInvokeCallback(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SimControl.Samples.CSharp.Wcf.ServiceContract.CompositeType compositeType = ((SimControl.Samples.CSharp.Wcf.ServiceContract.CompositeType)(inValues[0]));
            return this.BeginInvokeCallback(compositeType, callback, asyncState);
        }
        
        private object[] OnEndInvokeCallback(System.IAsyncResult result) {
            SimControl.Samples.CSharp.Wcf.ServiceContract.CompositeType retVal = this.EndInvokeCallback(result);
            return new object[] {
                    retVal};
        }
        
        private void OnInvokeCallbackCompleted(object state) {
            if ((this.InvokeCallbackCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InvokeCallbackCompleted(this, new InvokeCallbackCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void InvokeCallbackAsync(SimControl.Samples.CSharp.Wcf.ServiceContract.CompositeType compositeType) {
            this.InvokeCallbackAsync(compositeType, null);
        }
        
        public void InvokeCallbackAsync(SimControl.Samples.CSharp.Wcf.ServiceContract.CompositeType compositeType, object userState) {
            if ((this.onBeginInvokeCallbackDelegate == null)) {
                this.onBeginInvokeCallbackDelegate = new BeginOperationDelegate(this.OnBeginInvokeCallback);
            }
            if ((this.onEndInvokeCallbackDelegate == null)) {
                this.onEndInvokeCallbackDelegate = new EndOperationDelegate(this.OnEndInvokeCallback);
            }
            if ((this.onInvokeCallbackCompletedDelegate == null)) {
                this.onInvokeCallbackCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInvokeCallbackCompleted);
            }
            base.InvokeAsync(this.onBeginInvokeCallbackDelegate, new object[] {
                        compositeType}, this.onEndInvokeCallbackDelegate, this.onInvokeCallbackCompletedDelegate, userState);
        }
        
        public void InvokeCallbackOneWay(SimControl.Samples.CSharp.Wcf.ServiceContract.CompositeType compositeType) {
            base.Channel.InvokeCallbackOneWay(compositeType);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginInvokeCallbackOneWay(SimControl.Samples.CSharp.Wcf.ServiceContract.CompositeType compositeType, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginInvokeCallbackOneWay(compositeType, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndInvokeCallbackOneWay(System.IAsyncResult result) {
            base.Channel.EndInvokeCallbackOneWay(result);
        }
        
        private System.IAsyncResult OnBeginInvokeCallbackOneWay(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SimControl.Samples.CSharp.Wcf.ServiceContract.CompositeType compositeType = ((SimControl.Samples.CSharp.Wcf.ServiceContract.CompositeType)(inValues[0]));
            return this.BeginInvokeCallbackOneWay(compositeType, callback, asyncState);
        }
        
        private object[] OnEndInvokeCallbackOneWay(System.IAsyncResult result) {
            this.EndInvokeCallbackOneWay(result);
            return null;
        }
        
        private void OnInvokeCallbackOneWayCompleted(object state) {
            if ((this.InvokeCallbackOneWayCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InvokeCallbackOneWayCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void InvokeCallbackOneWayAsync(SimControl.Samples.CSharp.Wcf.ServiceContract.CompositeType compositeType) {
            this.InvokeCallbackOneWayAsync(compositeType, null);
        }
        
        public void InvokeCallbackOneWayAsync(SimControl.Samples.CSharp.Wcf.ServiceContract.CompositeType compositeType, object userState) {
            if ((this.onBeginInvokeCallbackOneWayDelegate == null)) {
                this.onBeginInvokeCallbackOneWayDelegate = new BeginOperationDelegate(this.OnBeginInvokeCallbackOneWay);
            }
            if ((this.onEndInvokeCallbackOneWayDelegate == null)) {
                this.onEndInvokeCallbackOneWayDelegate = new EndOperationDelegate(this.OnEndInvokeCallbackOneWay);
            }
            if ((this.onInvokeCallbackOneWayCompletedDelegate == null)) {
                this.onInvokeCallbackOneWayCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInvokeCallbackOneWayCompleted);
            }
            base.InvokeAsync(this.onBeginInvokeCallbackOneWayDelegate, new object[] {
                        compositeType}, this.onEndInvokeCallbackOneWayDelegate, this.onInvokeCallbackOneWayCompletedDelegate, userState);
        }
        
        public void Operation(SimControl.Samples.CSharp.Wcf.ServiceContract.OperationMode operationMode) {
            base.Channel.Operation(operationMode);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginOperation(SimControl.Samples.CSharp.Wcf.ServiceContract.OperationMode operationMode, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginOperation(operationMode, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndOperation(System.IAsyncResult result) {
            base.Channel.EndOperation(result);
        }
        
        private System.IAsyncResult OnBeginOperation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SimControl.Samples.CSharp.Wcf.ServiceContract.OperationMode operationMode = ((SimControl.Samples.CSharp.Wcf.ServiceContract.OperationMode)(inValues[0]));
            return this.BeginOperation(operationMode, callback, asyncState);
        }
        
        private object[] OnEndOperation(System.IAsyncResult result) {
            this.EndOperation(result);
            return null;
        }
        
        private void OnOperationCompleted(object state) {
            if ((this.OperationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OperationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OperationAsync(SimControl.Samples.CSharp.Wcf.ServiceContract.OperationMode operationMode) {
            this.OperationAsync(operationMode, null);
        }
        
        public void OperationAsync(SimControl.Samples.CSharp.Wcf.ServiceContract.OperationMode operationMode, object userState) {
            if ((this.onBeginOperationDelegate == null)) {
                this.onBeginOperationDelegate = new BeginOperationDelegate(this.OnBeginOperation);
            }
            if ((this.onEndOperationDelegate == null)) {
                this.onEndOperationDelegate = new EndOperationDelegate(this.OnEndOperation);
            }
            if ((this.onOperationCompletedDelegate == null)) {
                this.onOperationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOperationCompleted);
            }
            base.InvokeAsync(this.onBeginOperationDelegate, new object[] {
                        operationMode}, this.onEndOperationDelegate, this.onOperationCompletedDelegate, userState);
        }
    }
}
