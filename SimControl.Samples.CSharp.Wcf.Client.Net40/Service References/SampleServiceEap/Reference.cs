//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SimControl.Samples.CSharp.Wcf.net40.SampleServiceEap {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SampleServiceEap.ISampleService", SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface ISampleService {
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/ISampleService/ComplexOperation", ReplyAction="http://tempuri.org/ISampleService/ComplexOperationResponse")]
        SimControl.Samples.CSharp.Wcf.ServiceContract.CompositeType ComplexOperation(SimControl.Samples.CSharp.Wcf.ServiceContract.CompositeType data);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, AsyncPattern=true, Action="http://tempuri.org/ISampleService/ComplexOperation", ReplyAction="http://tempuri.org/ISampleService/ComplexOperationResponse")]
        System.IAsyncResult BeginComplexOperation(SimControl.Samples.CSharp.Wcf.ServiceContract.CompositeType data, System.AsyncCallback callback, object asyncState);
        
        SimControl.Samples.CSharp.Wcf.ServiceContract.CompositeType EndComplexOperation(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/ISampleService/ComplexOperationOneWay", ReplyAction="http://tempuri.org/ISampleService/ComplexOperationOneWayResponse")]
        void ComplexOperationOneWay(SimControl.Samples.CSharp.Wcf.ServiceContract.CompositeType data);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, AsyncPattern=true, Action="http://tempuri.org/ISampleService/ComplexOperationOneWay", ReplyAction="http://tempuri.org/ISampleService/ComplexOperationOneWayResponse")]
        System.IAsyncResult BeginComplexOperationOneWay(SimControl.Samples.CSharp.Wcf.ServiceContract.CompositeType data, System.AsyncCallback callback, object asyncState);
        
        void EndComplexOperationOneWay(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISampleService/Connect", ReplyAction="http://tempuri.org/ISampleService/ConnectResponse")]
        void Connect();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISampleService/Connect", ReplyAction="http://tempuri.org/ISampleService/ConnectResponse")]
        System.IAsyncResult BeginConnect(System.AsyncCallback callback, object asyncState);
        
        void EndConnect(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/ISampleService/Operation", ReplyAction="http://tempuri.org/ISampleService/OperationResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(System.InvalidOperationException), Action="http://tempuri.org/ISampleService/OperationInvalidOperationExceptionFault", Name="InvalidOperationException", Namespace="http://schemas.datacontract.org/2004/07/System")]
        void Operation(SimControl.Samples.CSharp.Wcf.ServiceContract.OperationMode operationMode);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, AsyncPattern=true, Action="http://tempuri.org/ISampleService/Operation", ReplyAction="http://tempuri.org/ISampleService/OperationResponse")]
        System.IAsyncResult BeginOperation(SimControl.Samples.CSharp.Wcf.ServiceContract.OperationMode operationMode, System.AsyncCallback callback, object asyncState);
        
        void EndOperation(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/ISampleService/OperationOneWay", ReplyAction="http://tempuri.org/ISampleService/OperationOneWayResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(System.InvalidOperationException), Action="http://tempuri.org/ISampleService/OperationOneWayInvalidOperationExceptionFault", Name="InvalidOperationException", Namespace="http://schemas.datacontract.org/2004/07/System")]
        void OperationOneWay(SimControl.Samples.CSharp.Wcf.ServiceContract.OperationMode operationMode);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, AsyncPattern=true, Action="http://tempuri.org/ISampleService/OperationOneWay", ReplyAction="http://tempuri.org/ISampleService/OperationOneWayResponse")]
        System.IAsyncResult BeginOperationOneWay(SimControl.Samples.CSharp.Wcf.ServiceContract.OperationMode operationMode, System.AsyncCallback callback, object asyncState);
        
        void EndOperationOneWay(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/ISampleService/get_CompositeType", ReplyAction="http://tempuri.org/ISampleService/get_CompositeTypeResponse")]
        SimControl.Samples.CSharp.Wcf.ServiceContract.CompositeType get_CompositeType();
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, AsyncPattern=true, Action="http://tempuri.org/ISampleService/get_CompositeType", ReplyAction="http://tempuri.org/ISampleService/get_CompositeTypeResponse")]
        System.IAsyncResult Beginget_CompositeType(System.AsyncCallback callback, object asyncState);
        
        SimControl.Samples.CSharp.Wcf.ServiceContract.CompositeType Endget_CompositeType(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISampleServiceChannel : SimControl.Samples.CSharp.Wcf.net40.SampleServiceEap.ISampleService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ComplexOperationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ComplexOperationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SimControl.Samples.CSharp.Wcf.ServiceContract.CompositeType Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SimControl.Samples.CSharp.Wcf.ServiceContract.CompositeType)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class get_CompositeTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public get_CompositeTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SimControl.Samples.CSharp.Wcf.ServiceContract.CompositeType Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SimControl.Samples.CSharp.Wcf.ServiceContract.CompositeType)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SampleServiceClient : System.ServiceModel.ClientBase<SimControl.Samples.CSharp.Wcf.net40.SampleServiceEap.ISampleService>, SimControl.Samples.CSharp.Wcf.net40.SampleServiceEap.ISampleService {
        
        private BeginOperationDelegate onBeginComplexOperationDelegate;
        
        private EndOperationDelegate onEndComplexOperationDelegate;
        
        private System.Threading.SendOrPostCallback onComplexOperationCompletedDelegate;
        
        private BeginOperationDelegate onBeginComplexOperationOneWayDelegate;
        
        private EndOperationDelegate onEndComplexOperationOneWayDelegate;
        
        private System.Threading.SendOrPostCallback onComplexOperationOneWayCompletedDelegate;
        
        private BeginOperationDelegate onBeginConnectDelegate;
        
        private EndOperationDelegate onEndConnectDelegate;
        
        private System.Threading.SendOrPostCallback onConnectCompletedDelegate;
        
        private BeginOperationDelegate onBeginOperationDelegate;
        
        private EndOperationDelegate onEndOperationDelegate;
        
        private System.Threading.SendOrPostCallback onOperationCompletedDelegate;
        
        private BeginOperationDelegate onBeginOperationOneWayDelegate;
        
        private EndOperationDelegate onEndOperationOneWayDelegate;
        
        private System.Threading.SendOrPostCallback onOperationOneWayCompletedDelegate;
        
        private BeginOperationDelegate onBeginget_CompositeTypeDelegate;
        
        private EndOperationDelegate onEndget_CompositeTypeDelegate;
        
        private System.Threading.SendOrPostCallback onget_CompositeTypeCompletedDelegate;
        
        public SampleServiceClient() {
        }
        
        public SampleServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SampleServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SampleServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SampleServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<ComplexOperationCompletedEventArgs> ComplexOperationCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ComplexOperationOneWayCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ConnectCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OperationCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OperationOneWayCompleted;
        
        public event System.EventHandler<get_CompositeTypeCompletedEventArgs> get_CompositeTypeCompleted;
        
        public SimControl.Samples.CSharp.Wcf.ServiceContract.CompositeType ComplexOperation(SimControl.Samples.CSharp.Wcf.ServiceContract.CompositeType data) {
            return base.Channel.ComplexOperation(data);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginComplexOperation(SimControl.Samples.CSharp.Wcf.ServiceContract.CompositeType data, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginComplexOperation(data, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public SimControl.Samples.CSharp.Wcf.ServiceContract.CompositeType EndComplexOperation(System.IAsyncResult result) {
            return base.Channel.EndComplexOperation(result);
        }
        
        private System.IAsyncResult OnBeginComplexOperation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SimControl.Samples.CSharp.Wcf.ServiceContract.CompositeType data = ((SimControl.Samples.CSharp.Wcf.ServiceContract.CompositeType)(inValues[0]));
            return this.BeginComplexOperation(data, callback, asyncState);
        }
        
        private object[] OnEndComplexOperation(System.IAsyncResult result) {
            SimControl.Samples.CSharp.Wcf.ServiceContract.CompositeType retVal = this.EndComplexOperation(result);
            return new object[] {
                    retVal};
        }
        
        private void OnComplexOperationCompleted(object state) {
            if ((this.ComplexOperationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ComplexOperationCompleted(this, new ComplexOperationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ComplexOperationAsync(SimControl.Samples.CSharp.Wcf.ServiceContract.CompositeType data) {
            this.ComplexOperationAsync(data, null);
        }
        
        public void ComplexOperationAsync(SimControl.Samples.CSharp.Wcf.ServiceContract.CompositeType data, object userState) {
            if ((this.onBeginComplexOperationDelegate == null)) {
                this.onBeginComplexOperationDelegate = new BeginOperationDelegate(this.OnBeginComplexOperation);
            }
            if ((this.onEndComplexOperationDelegate == null)) {
                this.onEndComplexOperationDelegate = new EndOperationDelegate(this.OnEndComplexOperation);
            }
            if ((this.onComplexOperationCompletedDelegate == null)) {
                this.onComplexOperationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnComplexOperationCompleted);
            }
            base.InvokeAsync(this.onBeginComplexOperationDelegate, new object[] {
                        data}, this.onEndComplexOperationDelegate, this.onComplexOperationCompletedDelegate, userState);
        }
        
        public void ComplexOperationOneWay(SimControl.Samples.CSharp.Wcf.ServiceContract.CompositeType data) {
            base.Channel.ComplexOperationOneWay(data);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginComplexOperationOneWay(SimControl.Samples.CSharp.Wcf.ServiceContract.CompositeType data, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginComplexOperationOneWay(data, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndComplexOperationOneWay(System.IAsyncResult result) {
            base.Channel.EndComplexOperationOneWay(result);
        }
        
        private System.IAsyncResult OnBeginComplexOperationOneWay(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SimControl.Samples.CSharp.Wcf.ServiceContract.CompositeType data = ((SimControl.Samples.CSharp.Wcf.ServiceContract.CompositeType)(inValues[0]));
            return this.BeginComplexOperationOneWay(data, callback, asyncState);
        }
        
        private object[] OnEndComplexOperationOneWay(System.IAsyncResult result) {
            this.EndComplexOperationOneWay(result);
            return null;
        }
        
        private void OnComplexOperationOneWayCompleted(object state) {
            if ((this.ComplexOperationOneWayCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ComplexOperationOneWayCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ComplexOperationOneWayAsync(SimControl.Samples.CSharp.Wcf.ServiceContract.CompositeType data) {
            this.ComplexOperationOneWayAsync(data, null);
        }
        
        public void ComplexOperationOneWayAsync(SimControl.Samples.CSharp.Wcf.ServiceContract.CompositeType data, object userState) {
            if ((this.onBeginComplexOperationOneWayDelegate == null)) {
                this.onBeginComplexOperationOneWayDelegate = new BeginOperationDelegate(this.OnBeginComplexOperationOneWay);
            }
            if ((this.onEndComplexOperationOneWayDelegate == null)) {
                this.onEndComplexOperationOneWayDelegate = new EndOperationDelegate(this.OnEndComplexOperationOneWay);
            }
            if ((this.onComplexOperationOneWayCompletedDelegate == null)) {
                this.onComplexOperationOneWayCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnComplexOperationOneWayCompleted);
            }
            base.InvokeAsync(this.onBeginComplexOperationOneWayDelegate, new object[] {
                        data}, this.onEndComplexOperationOneWayDelegate, this.onComplexOperationOneWayCompletedDelegate, userState);
        }
        
        public void Connect() {
            base.Channel.Connect();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginConnect(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginConnect(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndConnect(System.IAsyncResult result) {
            base.Channel.EndConnect(result);
        }
        
        private System.IAsyncResult OnBeginConnect(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginConnect(callback, asyncState);
        }
        
        private object[] OnEndConnect(System.IAsyncResult result) {
            this.EndConnect(result);
            return null;
        }
        
        private void OnConnectCompleted(object state) {
            if ((this.ConnectCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ConnectCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ConnectAsync() {
            this.ConnectAsync(null);
        }
        
        public void ConnectAsync(object userState) {
            if ((this.onBeginConnectDelegate == null)) {
                this.onBeginConnectDelegate = new BeginOperationDelegate(this.OnBeginConnect);
            }
            if ((this.onEndConnectDelegate == null)) {
                this.onEndConnectDelegate = new EndOperationDelegate(this.OnEndConnect);
            }
            if ((this.onConnectCompletedDelegate == null)) {
                this.onConnectCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnConnectCompleted);
            }
            base.InvokeAsync(this.onBeginConnectDelegate, null, this.onEndConnectDelegate, this.onConnectCompletedDelegate, userState);
        }
        
        public void Operation(SimControl.Samples.CSharp.Wcf.ServiceContract.OperationMode operationMode) {
            base.Channel.Operation(operationMode);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginOperation(SimControl.Samples.CSharp.Wcf.ServiceContract.OperationMode operationMode, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginOperation(operationMode, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndOperation(System.IAsyncResult result) {
            base.Channel.EndOperation(result);
        }
        
        private System.IAsyncResult OnBeginOperation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SimControl.Samples.CSharp.Wcf.ServiceContract.OperationMode operationMode = ((SimControl.Samples.CSharp.Wcf.ServiceContract.OperationMode)(inValues[0]));
            return this.BeginOperation(operationMode, callback, asyncState);
        }
        
        private object[] OnEndOperation(System.IAsyncResult result) {
            this.EndOperation(result);
            return null;
        }
        
        private void OnOperationCompleted(object state) {
            if ((this.OperationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OperationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OperationAsync(SimControl.Samples.CSharp.Wcf.ServiceContract.OperationMode operationMode) {
            this.OperationAsync(operationMode, null);
        }
        
        public void OperationAsync(SimControl.Samples.CSharp.Wcf.ServiceContract.OperationMode operationMode, object userState) {
            if ((this.onBeginOperationDelegate == null)) {
                this.onBeginOperationDelegate = new BeginOperationDelegate(this.OnBeginOperation);
            }
            if ((this.onEndOperationDelegate == null)) {
                this.onEndOperationDelegate = new EndOperationDelegate(this.OnEndOperation);
            }
            if ((this.onOperationCompletedDelegate == null)) {
                this.onOperationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOperationCompleted);
            }
            base.InvokeAsync(this.onBeginOperationDelegate, new object[] {
                        operationMode}, this.onEndOperationDelegate, this.onOperationCompletedDelegate, userState);
        }
        
        public void OperationOneWay(SimControl.Samples.CSharp.Wcf.ServiceContract.OperationMode operationMode) {
            base.Channel.OperationOneWay(operationMode);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginOperationOneWay(SimControl.Samples.CSharp.Wcf.ServiceContract.OperationMode operationMode, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginOperationOneWay(operationMode, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndOperationOneWay(System.IAsyncResult result) {
            base.Channel.EndOperationOneWay(result);
        }
        
        private System.IAsyncResult OnBeginOperationOneWay(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SimControl.Samples.CSharp.Wcf.ServiceContract.OperationMode operationMode = ((SimControl.Samples.CSharp.Wcf.ServiceContract.OperationMode)(inValues[0]));
            return this.BeginOperationOneWay(operationMode, callback, asyncState);
        }
        
        private object[] OnEndOperationOneWay(System.IAsyncResult result) {
            this.EndOperationOneWay(result);
            return null;
        }
        
        private void OnOperationOneWayCompleted(object state) {
            if ((this.OperationOneWayCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OperationOneWayCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OperationOneWayAsync(SimControl.Samples.CSharp.Wcf.ServiceContract.OperationMode operationMode) {
            this.OperationOneWayAsync(operationMode, null);
        }
        
        public void OperationOneWayAsync(SimControl.Samples.CSharp.Wcf.ServiceContract.OperationMode operationMode, object userState) {
            if ((this.onBeginOperationOneWayDelegate == null)) {
                this.onBeginOperationOneWayDelegate = new BeginOperationDelegate(this.OnBeginOperationOneWay);
            }
            if ((this.onEndOperationOneWayDelegate == null)) {
                this.onEndOperationOneWayDelegate = new EndOperationDelegate(this.OnEndOperationOneWay);
            }
            if ((this.onOperationOneWayCompletedDelegate == null)) {
                this.onOperationOneWayCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOperationOneWayCompleted);
            }
            base.InvokeAsync(this.onBeginOperationOneWayDelegate, new object[] {
                        operationMode}, this.onEndOperationOneWayDelegate, this.onOperationOneWayCompletedDelegate, userState);
        }
        
        public SimControl.Samples.CSharp.Wcf.ServiceContract.CompositeType get_CompositeType() {
            return base.Channel.get_CompositeType();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult Beginget_CompositeType(System.AsyncCallback callback, object asyncState) {
            return base.Channel.Beginget_CompositeType(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public SimControl.Samples.CSharp.Wcf.ServiceContract.CompositeType Endget_CompositeType(System.IAsyncResult result) {
            return base.Channel.Endget_CompositeType(result);
        }
        
        private System.IAsyncResult OnBeginget_CompositeType(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.Beginget_CompositeType(callback, asyncState);
        }
        
        private object[] OnEndget_CompositeType(System.IAsyncResult result) {
            SimControl.Samples.CSharp.Wcf.ServiceContract.CompositeType retVal = this.Endget_CompositeType(result);
            return new object[] {
                    retVal};
        }
        
        private void Onget_CompositeTypeCompleted(object state) {
            if ((this.get_CompositeTypeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.get_CompositeTypeCompleted(this, new get_CompositeTypeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void get_CompositeTypeAsync() {
            this.get_CompositeTypeAsync(null);
        }
        
        public void get_CompositeTypeAsync(object userState) {
            if ((this.onBeginget_CompositeTypeDelegate == null)) {
                this.onBeginget_CompositeTypeDelegate = new BeginOperationDelegate(this.OnBeginget_CompositeType);
            }
            if ((this.onEndget_CompositeTypeDelegate == null)) {
                this.onEndget_CompositeTypeDelegate = new EndOperationDelegate(this.OnEndget_CompositeType);
            }
            if ((this.onget_CompositeTypeCompletedDelegate == null)) {
                this.onget_CompositeTypeCompletedDelegate = new System.Threading.SendOrPostCallback(this.Onget_CompositeTypeCompleted);
            }
            base.InvokeAsync(this.onBeginget_CompositeTypeDelegate, null, this.onEndget_CompositeTypeDelegate, this.onget_CompositeTypeCompletedDelegate, userState);
        }
    }
}
