//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SimControl.Samples.CSharp.Wcf.Client.SampleServiceTap {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SampleServiceTap.ISampleService", CallbackContract=typeof(SimControl.Samples.CSharp.Wcf.Client.SampleServiceTap.ISampleServiceCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface ISampleService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISampleService/Connect", ReplyAction="http://tempuri.org/ISampleService/ConnectResponse")]
        void Connect();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISampleService/Connect", ReplyAction="http://tempuri.org/ISampleService/ConnectResponse")]
        System.Threading.Tasks.Task ConnectAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/ISampleService/InvokeCallback", ReplyAction="http://tempuri.org/ISampleService/InvokeCallbackResponse")]
        SimControl.Samples.CSharp.Wcf.ServiceContract.CompositeType InvokeCallback(SimControl.Samples.CSharp.Wcf.ServiceContract.CompositeType compositeType);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/ISampleService/InvokeCallback", ReplyAction="http://tempuri.org/ISampleService/InvokeCallbackResponse")]
        System.Threading.Tasks.Task<SimControl.Samples.CSharp.Wcf.ServiceContract.CompositeType> InvokeCallbackAsync(SimControl.Samples.CSharp.Wcf.ServiceContract.CompositeType compositeType);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsInitiating=false, Action="http://tempuri.org/ISampleService/InvokeCallbackOneWay")]
        void InvokeCallbackOneWay(SimControl.Samples.CSharp.Wcf.ServiceContract.CompositeType compositeType);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsInitiating=false, Action="http://tempuri.org/ISampleService/InvokeCallbackOneWay")]
        System.Threading.Tasks.Task InvokeCallbackOneWayAsync(SimControl.Samples.CSharp.Wcf.ServiceContract.CompositeType compositeType);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/ISampleService/Operation", ReplyAction="http://tempuri.org/ISampleService/OperationResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(System.InvalidOperationException), Action="http://tempuri.org/ISampleService/OperationInvalidOperationExceptionFault", Name="InvalidOperationException", Namespace="http://schemas.datacontract.org/2004/07/System")]
        void Operation(SimControl.Samples.CSharp.Wcf.ServiceContract.OperationMode operationMode);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/ISampleService/Operation", ReplyAction="http://tempuri.org/ISampleService/OperationResponse")]
        System.Threading.Tasks.Task OperationAsync(SimControl.Samples.CSharp.Wcf.ServiceContract.OperationMode operationMode);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISampleServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISampleService/Callback", ReplyAction="http://tempuri.org/ISampleService/CallbackResponse")]
        SimControl.Samples.CSharp.Wcf.ServiceContract.CompositeType Callback(SimControl.Samples.CSharp.Wcf.ServiceContract.CompositeType compositeType);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISampleService/OneWayCallback")]
        void OneWayCallback(SimControl.Samples.CSharp.Wcf.ServiceContract.CompositeType compositeType);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISampleServiceChannel : SimControl.Samples.CSharp.Wcf.Client.SampleServiceTap.ISampleService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SampleServiceClient : System.ServiceModel.DuplexClientBase<SimControl.Samples.CSharp.Wcf.Client.SampleServiceTap.ISampleService>, SimControl.Samples.CSharp.Wcf.Client.SampleServiceTap.ISampleService {
        
        public SampleServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public SampleServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public SampleServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public SampleServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public SampleServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void Connect() {
            base.Channel.Connect();
        }
        
        public System.Threading.Tasks.Task ConnectAsync() {
            return base.Channel.ConnectAsync();
        }
        
        public SimControl.Samples.CSharp.Wcf.ServiceContract.CompositeType InvokeCallback(SimControl.Samples.CSharp.Wcf.ServiceContract.CompositeType compositeType) {
            return base.Channel.InvokeCallback(compositeType);
        }
        
        public System.Threading.Tasks.Task<SimControl.Samples.CSharp.Wcf.ServiceContract.CompositeType> InvokeCallbackAsync(SimControl.Samples.CSharp.Wcf.ServiceContract.CompositeType compositeType) {
            return base.Channel.InvokeCallbackAsync(compositeType);
        }
        
        public void InvokeCallbackOneWay(SimControl.Samples.CSharp.Wcf.ServiceContract.CompositeType compositeType) {
            base.Channel.InvokeCallbackOneWay(compositeType);
        }
        
        public System.Threading.Tasks.Task InvokeCallbackOneWayAsync(SimControl.Samples.CSharp.Wcf.ServiceContract.CompositeType compositeType) {
            return base.Channel.InvokeCallbackOneWayAsync(compositeType);
        }
        
        public void Operation(SimControl.Samples.CSharp.Wcf.ServiceContract.OperationMode operationMode) {
            base.Channel.Operation(operationMode);
        }
        
        public System.Threading.Tasks.Task OperationAsync(SimControl.Samples.CSharp.Wcf.ServiceContract.OperationMode operationMode) {
            return base.Channel.OperationAsync(operationMode);
        }
    }
}
